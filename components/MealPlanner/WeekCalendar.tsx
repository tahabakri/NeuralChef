import React, { useRef, memo } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import { format, parseISO, addDays, addWeeks, subWeeks, startOfWeek } from 'date-fns';
import { Ionicons } from '@expo/vector-icons';
import Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';
import colors from '@/constants/colors';
import typography from '@/constants/typography';
import { WeekCalendarProps } from './types';

// Props for the individual date cell component
interface DateCellProps {
  date: string;
  isSelected: boolean;
  isToday: boolean;
  onPress: (date: string) => void;
  scaleAnim: Animated.SharedValue<number>;
}

// Memoized DateCell component to optimize rendering and correctly use hooks
const DateCell: React.FC<DateCellProps> = memo(({ date, isSelected, isToday, onPress, scaleAnim }) => {
  const parsedDate = parseISO(date);

  const animatedStyle = useAnimatedStyle(() => {
    // Hook is now at the top-level of DateCell
    if (isSelected) {
      return {
        transform: [{ scale: scaleAnim.value }],
      };
    }
    return {};
  });

  return (
    <Animated.View style={animatedStyle}>
      <TouchableOpacity
        style={[
          styles.dateItem,
          isSelected && styles.selectedDateItem,
          isToday && styles.todayDateItem,
        ]}
        onPress={() => onPress(date)}
      >
        <Text style={[
          styles.dayText,
          isSelected && styles.selectedText,
          isToday && !isSelected && styles.todayText
        ]}>
          {format(parsedDate, 'EEE')}
        </Text>
        <Text style={[
          styles.dateText,
          isSelected && styles.selectedText,
          isToday && !isSelected && styles.todayText
        ]}>
          {format(parsedDate, 'd')}
        </Text>
      </TouchableOpacity>
    </Animated.View>
  );
});

export default function WeekCalendar({ dates, selectedDate, onSelectDate }: WeekCalendarProps) {
  const scrollViewRef = useRef<ScrollView>(null);
  const scaleAnim = useSharedValue(1); // This shared value will be passed to DateCell

  const handleDateSelect = (date: string) => {
    // Animate the selected cell
    scaleAnim.value = withSpring(1.1, { damping: 10, stiffness: 200 }, () => {
      scaleAnim.value = withSpring(1);
    });
    onSelectDate(date); // Propagate selection to parent
  };

  const navigateToToday = () => {
    const todayString = format(new Date(), 'yyyy-MM-dd');
    // Parent will handle date regeneration and scrolling if needed
    onSelectDate(todayString);

    // Attempt to scroll if today is visible in the current `dates` array
    const todayIndex = dates.indexOf(todayString);
    if (todayIndex !== -1 && scrollViewRef.current) {
      const itemWidth = 54; // width of dateItem
      const itemMargin = 8; // marginRight of dateItem
      const scrollToX = todayIndex * (itemWidth + itemMargin);
      scrollViewRef.current.scrollTo({ x: scrollToX, animated: true });
    }
  };

  const navigateWeek = (direction: 'prev' | 'next') => {
    const currentSelectedDate = parseISO(selectedDate);
    // Determine the reference date for week navigation (start of the current selected week)
    const startOfCurrentWeek = startOfWeek(currentSelectedDate, { weekStartsOn: 1 }); // Assuming week starts on Monday

    const newWeekStartDate = direction === 'prev'
      ? subWeeks(startOfCurrentWeek, 1)
      : addWeeks(startOfCurrentWeek, 1);

    // Maintain the same day of the week, or default to the start of the new week
    const dayOfWeekOffset = currentSelectedDate.getDay() - startOfCurrentWeek.getDay();
    let newSelectedDate = addDays(newWeekStartDate, dayOfWeekOffset);
    
    // Ensure the new selected date is within the new week's bounds
    // (This logic might need adjustment based on how `dates` array is generated by parent)
    // For now, we just select the corresponding day in the new week.
    // The parent component is responsible for updating the `dates` array.
    onSelectDate(format(newSelectedDate, 'yyyy-MM-dd'));
  };
  
  return (
    <View style={styles.container}>
      <View style={styles.navigationRow}>
        <TouchableOpacity
          style={styles.navigationButton}
          onPress={() => navigateWeek('prev')}
        >
          <Ionicons name="chevron-back" size={24} color={colors.textSecondary} />
        </TouchableOpacity>
        
        <TouchableOpacity
          style={styles.todayButton}
          onPress={navigateToToday}
        >
          <Text style={styles.todayButtonText}>Today</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={styles.navigationButton}
          onPress={() => navigateWeek('next')}
        >
          <Ionicons name="chevron-forward" size={24} color={colors.textSecondary} />
        </TouchableOpacity>
      </View>
      
      <ScrollView
        ref={scrollViewRef}
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.datesContainer}
      >
        {dates.map((dateString) => {
          const isSelected = dateString === selectedDate;
          const isToday = format(new Date(), 'yyyy-MM-dd') === dateString;
          return (
            <DateCell
              key={dateString}
              date={dateString}
              isSelected={isSelected}
              isToday={isToday}
              onPress={handleDateSelect}
              scaleAnim={scaleAnim}
            />
          );
        })}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.cardAlt,
    paddingVertical: 12,
  },
  navigationRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    marginBottom: 8,
  },
  navigationButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.card,
  },
  todayButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 16,
    backgroundColor: colors.card,
  },
  todayButtonText: {
    ...typography.bodyMedium,
    color: colors.primary,
    fontWeight: '600',
  },
  datesContainer: {
    paddingHorizontal: 16,
  },
  dateItem: {
    width: 54,
    height: 70,
    borderRadius: 12,
    backgroundColor: colors.card,
    marginRight: 8,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 8,
  },
  selectedDateItem: {
    backgroundColor: colors.primary,
  },
  todayDateItem: {
    borderWidth: 2,
    borderColor: colors.primary,
  },
  dayText: {
    fontSize: 14,
    color: colors.textSecondary,
    marginBottom: 4,
  },
  dateText: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
  },
  selectedText: {
    color: colors.white,
  },
  todayText: {
    color: colors.primary,
  },
});
